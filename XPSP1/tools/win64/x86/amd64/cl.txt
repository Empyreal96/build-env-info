Microsoft (R) C/C++ Optimizing Compiler Version 13.00.9269.1 for AMD64
Copyright (C) Microsoft Corporation 1984-2001. All rights reserved.


                          C/C++ COMPILER OPTIONS

                              -OPTIMIZATION-

/O1 minimize space                       /Op[-] improve floating-pt consistency
/O2 maximize speed                       /Os favor code space
/Ob<n> inline expansion (default n=0)    /Ot favor code speed
/Od disable optimizations (default)      /Ox maximum opts. (/Ogityb1 /Gs)
/Og enable global optimization           /Oy[-] enable frame pointer omission
/Oi enable intrinsic functions

                             -CODE GENERATION-

/GA optimize for Windows Application     /GR[-] enable C++ RTTI
/GD optimize for Windows DLL             /GX[-] enable C++ EH (same as /EHsc)
/Gf enable string pooling                /EHs enable C++ EH (no SEH exceptions)
/GF enable read-only string pooling      /EHa enable C++ EH (w/ SEH exceptions)
/Gy separate functions for linker        /EHc extern "C" defaults to nothrow
/Ge force stack checking for all funcs   /Gm[-] enable minimal rebuild
/Gs[num] disable stack checking calls    /As32 enable 32 bit address space 
/Gh enable _penter function call         /As64 enable 64 bit address space (default)
/GH enable _pexit function call

                              -OUTPUT FILES-

/Fa[file] name assembly listing file     /Fo<file> name object file
/FA[sc] configure assembly listing       /Fp<file> name precompiled header file
/Fd[file] name .PDB file                 /Fr[file] name source browser file
/Fe<file> name executable file           /FR[file] name extended .SBR file
/Fm[file] name map file

                              -PREPROCESSOR-

/AI<dir> add to assembly search path     /Fx merge injected code to file
/FU<file> forced using assembly/module   /FI<file> name forced include file
/C don't strip comments                  /U<name> remove predefined macro
/D<name>{=|#}<text> define macro         /u remove all predefined macros
/E preprocess to stdout                  /I<dir> add to include search path
/EP preprocess to stdout, no #line       /X ignore "standard places"
/P preprocess to file

                                -LANGUAGE-

/Zi enable debugging information         /Zl omit default library name in .OBJ
/Z7 enable old-style debug info          /Zg generate function prototypes
/Zd line number debugging info only      /Zs syntax check only
/Zp[n] pack structs on n-byte boundary   /Zx debuggable optimizations
/Za disable extensions (implies /Op)     /vd{0|1} disable/enable vtordisp
/Zc:forScope Standard C++ for scoping    /vm<x> type of pointers to members
/Ze enable extensions (default)          /noBool disable "bool" keyword

                              -MISCELLANEOUS-

@<file> options response file            /w disable all warnings
/?, /help print this help message        /W<n> set warning level (default n=1)
/c compile only, no link                 /Wall enable all warnings
/H<num> max external name length         /WX treat warnings as errors
/J default char type is unsigned         /WL enable one line diagnostics
/nologo suppress copyright message       /Wp64 enable portability diagnostics
/Tc<source file> compile file as .c      /Yc[file] create .PCH file
/Tp<source file> compile file as .cpp    /Yd put debug info in every .OBJ
/TC compile all files as .c              /Yu[file] use .PCH file
/TP compile all files as .cpp            /YX[file] automatic .PCH
/V<string> set version string            /Zm<n> max memory alloc (% of default)

                                 -LINKING-

/MD link with MSVCRT.LIB                 /MDd link with MSVCRTD.LIB debug lib
/ML link with LIBC.LIB                   /MLd link with LIBCD.LIB debug lib
/MT link with LIBCMT.LIB                 /MTd link with LIBCMTD.LIB debug lib
/LD Create .DLL                          /F<num> set stack size
/LDd Create .DLL debug library           /link [linker options and libraries]
